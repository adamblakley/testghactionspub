name: Plugin Release Workflow
on:
  workflow_dispatch:
    inputs:
      PLUGIN_NAME:
        description: 'Plugin to release. The name must match the plugin directory name in GitHub. Multiple plugins can be entered, separated by commas (freegeoip,jira,etc).'
        required: false
  pull_request:
    types: [closed]
    branches:
      - master

permissions:
  id-token: write
  contents: write
  actions: read

jobs:
  release:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Repository
        id: checkoutRepository
        uses: actions/checkout@v3
        with:
          fetch-depth: 5
          ref: "refs/heads/main"

      - name: Find the filename
        id: find-filename
        run: |
          # Navigate to the desired directory
          cd .github/workflows/builds

          # Use find to get the filename
          filename=$(find . -type f -maxdepth 1 | xargs basename)
          
          # Set the output variable for later use
          echo "RELEASE_ASSET=${filename}" >> $GITHUB_ENV
          echo "GIT_TAG=${filename%.tar.gz}" >> $GITHUB_ENV
          
      - name: Get release ID
        id: get-release-id
        run: |
          RELEASE_ID=$(curl -s -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
            "https://api.github.com/repos/${{ github.repository }}/releases/tags/${{ env.GIT_TAG }}" \
            | jq -r '.id')

          echo "RELEASE_ID=${RELEASE_ID}" >> $GITHUB_ENV

      - name: Update or Create Release
        run: |
          if [ -n "$RELEASE_ID" ]; then
            # If release already exists, update it
            curl -X PATCH -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
              -H "Accept: application/vnd.github.v3+json" \
              "https://api.github.com/repos/${{ github.repository }}/releases/${RELEASE_ID}" \
              -d '{"tag_name":"${{ env.GIT_TAG }}","name":"${{ env.GIT_TAG }}","body":"${{ env.GIT_TAG }}"}'
          else
            # If release does not exist, create it
            curl -X POST -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
              -H "Accept: application/vnd.github.v3+json" \
              "https://api.github.com/repos/${{ github.repository }}/releases" \
              -d '{"tag_name":"${{ env.GIT_TAG }}","name":"${{ env.GIT_TAG }}","body":"${{ env.GIT_TAG }}"}'
          fi

      - name: Get new release ID
        id: get-new-release-id
        run: |
          RELEASE_ID=$(curl -s -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
            "https://api.github.com/repos/${{ github.repository }}/releases/tags/${{ env.GIT_TAG }}" \
            | jq -r '.id')

          echo "RELEASE_ID=${RELEASE_ID}" >> $GITHUB_ENV

      - name: Upload release asset
        id: uploadReleaseAsset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: "https://uploads.github.com/repos/${{ github.repository }}/releases/${{ env.RELEASE_ID }}/assets?name=${{ env.GIT_TAG }}"
          asset_path: .github/workflows/builds/${{ env.RELEASE_ASSET }}
          asset_name: ${{ env.RELEASE_ASSET }}
          asset_content_type: application/gzip
